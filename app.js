// Generated by CoffeeScript 1.8.0
(function() {
  var Model, argv, d, h, js2coffee, m, mysql, p, t, u;

  mysql = require("mysql");

  js2coffee = require('js2coffee');

  argv = require('optimist').argv;

  Model = (function() {
    function Model(h, u, p, d, tableName) {
      this.h = h != null ? h : 'localhost';
      this.u = u != null ? u : 'root';
      this.p = p != null ? p : '';
      this.d = d != null ? d : '';
      this.tableName = tableName;
    }

    Model.prototype.connect = function(cb) {
      var connection, self;
      self = this;
      connection = mysql.createConnection({
        host: self.h,
        user: self.u,
        password: self.p,
        database: self.d
      });
      return connection.connect(function(err) {
        if (err) {
          console.log("连接MySQL错误");
          return console.log('error connecting: ' + err.stack);
        }
        return cb(connection);
      });
    };

    Model.prototype.descSql = function(db) {
      var self, sql;
      self = this;
      sql = "DESC " + self.tableName;
      return db.query(sql, function(err, row) {
        var code, content, end, i, js, tmp, _i, _len;
        console.log("SQL =>", sql);
        if (err) {
          db.end();
          return console.log(err);
        }
        code = [];
        for (_i = 0, _len = row.length; _i < _len; _i++) {
          i = row[_i];
          tmp = {};
          tmp["name"] = i.Field;
          tmp["type"] = self.checkType(i.Type);
          tmp["defaultValue"] = i.Default;
          if (i.Key === 'PRI') {
            tmp["primaryKey"] = true;
            delete tmp["defaultValue"];
          }
          code.push(tmp);
        }
        js = JSON.stringify(code);
        content = js2coffee.build(js, {
          show_src_lineno: false,
          indent: "  "
        });
        end = self.filterType(content);
        console.log(end);
        return db.end();
      });
    };

    Model.prototype.checkType = function(test) {
      if (test.indexOf("int") > -1) {
        return 'T.Type.Integer';
      }
      if (test.indexOf("char") > -1) {
        return 'T.Type.String';
      }
      if (test.indexOf("decimal") > -1) {
        return 'T.Type.Float';
      }
      if (test.indexOf("text") > -1) {
        return 'T.Type.Json';
      }
      return 'T.Type.String';
    };

    Model.prototype.filterType = function(test) {
      var four, one, three, tow;
      one = test.replace(/"T.Type.Integer"/g, "T.Type.Integer");
      tow = one.replace(/"T.Type.String"/g, "T.Type.String");
      three = tow.replace(/"T.Type.Float"/g, "T.Type.Float");
      four = three.replace(/"T.Type.Json"/g, "T.Type.Json");
      return four;
    };

    return Model;

  })();

  h = argv.h;

  u = argv.u;

  p = argv.p;

  d = argv.d;

  t = argv.t;

  if (!t || !d) {
    return console.log("请输入要选择的数据库和要选择的表");
  }

  m = new Model(h, u, p, d, t);

  m.connect(function(db) {
    return m.descSql(db);
  });

}).call(this);

//# sourceMappingURL=app.js.map
